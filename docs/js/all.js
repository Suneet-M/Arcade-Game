"use strict";!function(){var n={},a=[];function t(e){if(n[e])return n[e];var t=new Image;t.onload=function(){n[e]=t,s()&&a.forEach(function(e){e()})},n[e]=!1,t.src=e}function s(){var e=!0;for(var t in n)n.hasOwnProperty(t)&&!n[t]&&(e=!1);return e}window.Resources={load:function(e){e instanceof Array?e.forEach(function(e){t(e)}):t(e)},get:function(e){return n[e]},onReady:function(e){a.push(e)},isReady:s}}();var Engine=function(e){var n,a,t=e.document,s=e.window,r=t.createElement("canvas"),i=r.getContext("2d");function o(){var t,e=Date.now();t=(e-n)/1e3,allEnemies.forEach(function(e){e.update(t)}),function(){var e,t,n=["img/water-block.png","img/stone-block.png","img/stone-block.png","img/stone-block.png","img/grass-block.png","img/grass-block.png"];for(i.clearRect(0,0,r.width,r.height),e=0;e<6;e++)for(t=0;t<5;t++)i.drawImage(Resources.get(n[e]),101*t,83*e);allEnemies.forEach(function(e){e.render()}),player.render()}(),n=e,player.win||player.lose?s.cancelAnimationFrame(a):a=s.requestAnimationFrame(o)}return r.width=505,r.height=600,document.querySelector(".canvas-container").appendChild(r),Resources.load(["img/stone-block.png","img/water-block.png","img/grass-block.png","img/enemy-bug.png","img/char-boy.png"]),Resources.onReady(function(){n=Date.now(),o()}),e.ctx=i,{start:o}}(window);function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),e}var Enemy=function(){function a(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:-120;_classCallCheck(this,a),this.sprite="img/enemy-bug.png",this.startX=n,this.x=this.startX,this.y=t,this.sp=e,this.random=100}return _createClass(a,[{key:"update",value:function(e){this.x+=this.sp*this.random*e,520<=this.x&&(this.x=this.startX,this.random=100*Math.random()+100),checkCollision(this),checkWin()}},{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}},{key:"endX",get:function(){return this.x+tileWidth}},{key:"endY",get:function(){return this.y+tileHeight}}]),a}(),Player=function(){function e(){_classCallCheck(this,e),this.sprite="img/char-boy.png",this.startX=200,this.startY=375,this.x=this.startX,this.y=this.startY,this.win=!1,this.lose=!1}return _createClass(e,[{key:"render",value:function(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}},{key:"handleInput",value:function(e){switch(e){case"left":-2===this.x||(this.x-=tileWidth);break;case"up":-40===this.y||(this.y-=tileHeight);break;case"down":375===this.y||(this.y+=tileHeight);break;case"right":402===this.x||(this.x+=tileWidth)}}},{key:"feetY",get:function(){return this.y+tileHeight}},{key:"feetX",get:function(){return this.x+tileWidth/2}}]),e}(),allEnemies=[new Enemy(1.5,64),new Enemy(3,64,-550),new Enemy(6,64,-1e3),new Enemy(2,147),new Enemy(1.2,147,-200),new Enemy(3,147,-800),new Enemy(1,230),new Enemy(2.2,230,-450)],player=new Player,tileWidth=101,tileHeight=83;function checkCollision(e){player.feetX<=e.endX&&player.feetX>=e.x&&player.feetY<=e.endY&&player.feetY>=e.y&&(resetPlayer(),reduceLives())}function resetPlayer(){player.x=player.startX,player.y=player.startY}document.addEventListener("keyup",function(e){player.handleInput({37:"left",38:"up",39:"right",40:"down"}[e.keyCode])}),document.querySelector(".arrow-keys").addEventListener("click",function(e){switch(e.target.classList.value){case"fas fa-arrow-up":player.handleInput("up");break;case"fas fa-arrow-down":player.handleInput("down");break;case"fas fa-arrow-left":player.handleInput("left");break;case"fas fa-arrow-right":player.handleInput("right")}});var lives=Array.from(document.querySelectorAll(".fa-heart")),i=lives.length;function reduceLives(){lives[--i].classList.remove("fas"),lives[i].classList.add("far"),checkLose()}function checkWin(){-40==player.y&&gameWin()}function gameWin(){player.win=!0,num=0,showModal()}function checkLose(){0==i&&gameLose()}function gameLose(){player.lose=!0,num=1,showModal()}function resetLives(){for(i=0;i<lives.length;i++)lives[i].classList.add("fas")}function resetGame(){player.win=!1,player.lose=!1,resetPlayer(),resetLives(),hideModal(),Engine.start()}var num,modalBack=document.querySelector(".modal-back"),modalBody=Array.from(document.querySelectorAll(".modal-body")),closeButtons=Array.from(document.querySelectorAll(".close")),resetButtons=Array.from(document.querySelectorAll(".reset"));function showModal(){modalBack.classList.add("show"),modalBody[num].classList.add("show"),0==num?modalBody[num].classList.add("tada"):modalBody[num].classList.add("wobble"),document.querySelector(".content").innerHTML=document.querySelector(".score-panel").innerHTML,toggleListeners("on"),resetButtons[num].focus()}function hideModal(){modalBody[num].classList.add("bounceOut"),setTimeout(function(){modalBody[num].classList.remove("show","tada","wobble","bounceOut"),modalBack.classList.remove("show")},780),toggleListeners("off")}function toggleListeners(e){switch(e){case"on":closeButtons[num].addEventListener("click",hideModal),resetButtons[num].addEventListener("click",resetGame);break;case"off":closeButtons[num].removeEventListener("click",hideModal),resetButtons[num].removeEventListener("click",resetGame)}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc291cmNlcy5qcyIsImVuZ2luZS5qcyIsImFwcC5qcyJdLCJuYW1lcyI6WyJyZXNvdXJjZUNhY2hlIiwicmVhZHlDYWxsYmFja3MiLCJfbG9hZCIsInVybCIsImltZyIsIkltYWdlIiwib25sb2FkIiwiaXNSZWFkeSIsImZvckVhY2giLCJmdW5jIiwic3JjIiwicmVhZHkiLCJrIiwiaGFzT3duUHJvcGVydHkiLCJ3aW5kb3ciLCJSZXNvdXJjZXMiLCJsb2FkIiwidXJsT3JBcnIiLCJBcnJheSIsImdldCIsIm9uUmVhZHkiLCJwdXNoIiwiRW5naW5lIiwiZ2xvYmFsIiwibGFzdFRpbWUiLCJpZCIsImRvYyIsImRvY3VtZW50Iiwid2luIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImN0eCIsImdldENvbnRleHQiLCJtYWluIiwiZHQiLCJub3ciLCJEYXRlIiwiYWxsRW5lbWllcyIsImVuZW15IiwidXBkYXRlIiwicm93IiwiY29sIiwicm93SW1hZ2VzIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJkcmF3SW1hZ2UiLCJyZW5kZXIiLCJwbGF5ZXIiLCJsb3NlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJxdWVyeVNlbGVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJzdGFydCIsIkVuZW15Iiwic3BlZWQiLCJ5IiwieCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJzcHJpdGUiLCJzdGFydFgiLCJzcCIsInJhbmRvbSIsIk1hdGgiLCJjaGVja0NvbGxpc2lvbiIsImNoZWNrV2luIiwidGlsZVdpZHRoIiwidGlsZUhlaWdodCIsIlBsYXllciIsInN0YXJ0WSIsImtleSIsImZlZXRYIiwiZW5kWCIsImZlZXRZIiwiZW5kWSIsInJlc2V0UGxheWVyIiwicmVkdWNlTGl2ZXMiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImhhbmRsZUlucHV0IiwiMzciLCIzOCIsIjM5IiwiNDAiLCJrZXlDb2RlIiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwidmFsdWUiLCJsaXZlcyIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsInJlbW92ZSIsImFkZCIsImNoZWNrTG9zZSIsImdhbWVXaW4iLCJudW0iLCJzaG93TW9kYWwiLCJnYW1lTG9zZSIsInJlc2V0TGl2ZXMiLCJyZXNldEdhbWUiLCJoaWRlTW9kYWwiLCJtb2RhbEJhY2siLCJtb2RhbEJvZHkiLCJjbG9zZUJ1dHRvbnMiLCJyZXNldEJ1dHRvbnMiLCJpbm5lckhUTUwiLCJ0b2dnbGVMaXN0ZW5lcnMiLCJmb2N1cyIsInNldFRpbWVvdXQiLCJzdyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQUFBLGNBT0EsV0FDQyxJQUFJQSxFQUFnQixHQUNoQkMsRUFBaUIsR0EyQnJCLFNBQVNDLEVBQU1DLEdBQ2QsR0FBR0gsRUFBY0csR0FLaEIsT0FBT0gsRUFBY0csR0FLckIsSUFBSUMsRUFBTSxJQUFJQyxNQUNkRCxFQUFJRSxPQUFTLFdBS1pOLEVBQWNHLEdBQU9DLEVBSWxCRyxLQUNGTixFQUFlTyxRQUFRLFNBQVNDLEdBQVFBLE9BUTFDVCxFQUFjRyxJQUFPLEVBQ3JCQyxFQUFJTSxJQUFNUCxFQWVaLFNBQVNJLElBQ1IsSUFBSUksR0FBUSxFQUNaLElBQUksSUFBSUMsS0FBS1osRUFDVEEsRUFBY2EsZUFBZUQsS0FDOUJaLEVBQWNZLEtBQ2ZELEdBQVEsR0FHVixPQUFPQSxFQWFSRyxPQUFPQyxVQUFZLENBQ2xCQyxLQXpGRCxTQUFjQyxHQUNWQSxhQUFvQkMsTUFLdEJELEVBQVNULFFBQVEsU0FBU0wsR0FDekJELEVBQU1DLEtBT1BELEVBQU1lLElBNEVQRSxJQTlCRCxTQUFhaEIsR0FDWixPQUFPSCxFQUFjRyxJQThCckJpQixRQVZELFNBQWlCWCxHQUNoQlIsRUFBZW9CLEtBQUtaLElBVXBCRixRQUFTQSxHQXBHWCxHQ1NBLElBQUllLE9BQVUsU0FBU0MsR0FLdEIsSUFJQ0MsRUFD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LFNBQzFCLEtBR0ZlLGdCQUFnQixPQUdqQixTQUFTQSxnQkFBZ0JHLEdBQ3hCLE9BQVFBLEdBQ1IsSUFBSyxLQUNKTixhQUFhUixLQUFLbkIsaUJBQWlCLFFBQVN3QixXQUM1Q0ksYUFBYVQsS0FBS25CLGlCQUFpQixRQUFTdUIsV0FDNUMsTUFFRCxJQUFLLE1BQ0pJLGFBQWFSLEtBQUtlLG9CQUFvQixRQUFTVixXQUMvQ0ksYUFBYVQsS0FBS2Usb0JBQW9CLFFBQVNYIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuLyogUmVzb3VyY2VzLmpzXHJcbiAqIFRoaXMgaXMgc2ltcGx5IGFuIGltYWdlIGxvYWRpbmcgdXRpbGl0eS4gSXQgZWFzZXMgdGhlIHByb2Nlc3Mgb2YgbG9hZGluZ1xyXG4gKiBpbWFnZSBmaWxlcyBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgd2l0aGluIHlvdXIgZ2FtZS4gSXQgYWxzbyBpbmNsdWRlc1xyXG4gKiBhIHNpbXBsZSBcImNhY2hpbmdcIiBsYXllciBzbyBpdCB3aWxsIHJldXNlIGNhY2hlZCBpbWFnZXMgaWYgeW91IGF0dGVtcHRcclxuICogdG8gbG9hZCB0aGUgc2FtZSBpbWFnZSBtdWx0aXBsZSB0aW1lcy5cclxuICovXHJcbihmdW5jdGlvbigpIHtcclxuXHR2YXIgcmVzb3VyY2VDYWNoZSA9IHt9O1xyXG5cdHZhciByZWFkeUNhbGxiYWNrcyA9IFtdO1xyXG5cclxuXHQvKiBUaGlzIGlzIHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIGltYWdlIGxvYWRpbmcgZnVuY3Rpb24uIEl0IGFjY2VwdHNcclxuXHQgKiBhbiBhcnJheSBvZiBzdHJpbmdzIHBvaW50aW5nIHRvIGltYWdlIGZpbGVzIG9yIGEgc3RyaW5nIGZvciBhIHNpbmdsZVxyXG5cdCAqIGltYWdlLiBJdCB3aWxsIHRoZW4gY2FsbCBvdXIgcHJpdmF0ZSBpbWFnZSBsb2FkaW5nIGZ1bmN0aW9uIGFjY29yZGluZ2x5LlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGxvYWQodXJsT3JBcnIpIHtcclxuXHRcdGlmKHVybE9yQXJyIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuXHRcdFx0LyogSWYgdGhlIGRldmVsb3BlciBwYXNzZWQgaW4gYW4gYXJyYXkgb2YgaW1hZ2VzXHJcblx0XHRcdCAqIGxvb3AgdGhyb3VnaCBlYWNoIHZhbHVlIGFuZCBjYWxsIG91ciBpbWFnZVxyXG5cdFx0XHQgKiBsb2FkZXIgb24gdGhhdCBpbWFnZSBmaWxlXHJcblx0XHRcdCAqL1xyXG5cdFx0XHR1cmxPckFyci5mb3JFYWNoKGZ1bmN0aW9uKHVybCkge1xyXG5cdFx0XHRcdF9sb2FkKHVybCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0LyogVGhlIGRldmVsb3BlciBkaWQgbm90IHBhc3MgYW4gYXJyYXkgdG8gdGhpcyBmdW5jdGlvbixcclxuXHRcdFx0ICogYXNzdW1lIHRoZSB2YWx1ZSBpcyBhIHN0cmluZyBhbmQgY2FsbCBvdXIgaW1hZ2UgbG9hZGVyXHJcblx0XHRcdCAqIGRpcmVjdGx5LlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0X2xvYWQodXJsT3JBcnIpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyogVGhpcyBpcyBvdXIgcHJpdmF0ZSBpbWFnZSBsb2FkZXIgZnVuY3Rpb24sIGl0IGlzXHJcblx0ICogY2FsbGVkIGJ5IHRoZSBwdWJsaWMgaW1hZ2UgbG9hZGVyIGZ1bmN0aW9uLlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIF9sb2FkKHVybCkge1xyXG5cdFx0aWYocmVzb3VyY2VDYWNoZVt1cmxdKSB7XHJcblx0XHRcdC8qIElmIHRoaXMgVVJMIGhhcyBiZWVuIHByZXZpb3VzbHkgbG9hZGVkIGl0IHdpbGwgZXhpc3Qgd2l0aGluXHJcblx0XHRcdCAqIG91ciByZXNvdXJjZUNhY2hlIGFycmF5LiBKdXN0IHJldHVybiB0aGF0IGltYWdlIHJhdGhlclxyXG5cdFx0XHQgKiByZS1sb2FkaW5nIHRoZSBpbWFnZS5cclxuXHRcdFx0ICovXHJcblx0XHRcdHJldHVybiByZXNvdXJjZUNhY2hlW3VybF07XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvKiBUaGlzIFVSTCBoYXMgbm90IGJlZW4gcHJldmlvdXNseSBsb2FkZWQgYW5kIGlzIG5vdCBwcmVzZW50XHJcblx0XHRcdCAqIHdpdGhpbiBvdXIgY2FjaGU7IHdlJ2xsIG5lZWQgdG8gbG9hZCB0aGlzIGltYWdlLlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0dmFyIGltZyA9IG5ldyBJbWFnZSgpO1xyXG5cdFx0XHRpbWcub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0LyogT25jZSBvdXIgaW1hZ2UgaGFzIHByb3Blcmx5IGxvYWRlZCwgYWRkIGl0IHRvIG91ciBjYWNoZVxyXG5cdFx0XHRcdCAqIHNvIHRoYXQgd2UgY2FuIHNpbXBseSByZXR1cm4gdGhpcyBpbWFnZSBpZiB0aGUgZGV2ZWxvcGVyXHJcblx0XHRcdFx0ICogYXR0ZW1wdHMgdG8gbG9hZCB0aGlzIGZpbGUgaW4gdGhlIGZ1dHVyZS5cclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRyZXNvdXJjZUNhY2hlW3VybF0gPSBpbWc7XHJcblx0XHRcdFx0LyogT25jZSB0aGUgaW1hZ2UgaXMgYWN0dWFsbHkgbG9hZGVkIGFuZCBwcm9wZXJseSBjYWNoZWQsXHJcblx0XHRcdFx0ICogY2FsbCBhbGwgb2YgdGhlIG9uUmVhZHkoKSBjYWxsYmFja3Mgd2UgaGF2ZSBkZWZpbmVkLlxyXG5cdFx0XHRcdCAqL1xyXG5cdFx0XHRcdGlmKGlzUmVhZHkoKSkge1xyXG5cdFx0XHRcdFx0cmVhZHlDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbihmdW5jKSB7IGZ1bmMoKTsgfSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0LyogU2V0IHRoZSBpbml0aWFsIGNhY2hlIHZhbHVlIHRvIGZhbHNlLCB0aGlzIHdpbGwgY2hhbmdlIHdoZW5cclxuXHRcdFx0ICogdGhlIGltYWdlJ3Mgb25sb2FkIGV2ZW50IGhhbmRsZXIgaXMgY2FsbGVkLiBGaW5hbGx5LCBwb2ludFxyXG5cdFx0XHQgKiB0aGUgaW1hZ2UncyBzcmMgYXR0cmlidXRlIHRvIHRoZSBwYXNzZWQgaW4gVVJMLlxyXG5cdFx0XHQgKi9cclxuXHRcdFx0cmVzb3VyY2VDYWNoZVt1cmxdID0gZmFsc2U7XHJcblx0XHRcdGltZy5zcmMgPSB1cmw7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKiBUaGlzIGlzIHVzZWQgYnkgZGV2ZWxvcGVycyB0byBncmFiIHJlZmVyZW5jZXMgdG8gaW1hZ2VzIHRoZXkga25vd1xyXG5cdCAqIGhhdmUgYmVlbiBwcmV2aW91c2x5IGxvYWRlZC4gSWYgYW4gaW1hZ2UgaXMgY2FjaGVkLCB0aGlzIGZ1bmN0aW9uc1xyXG5cdCAqIHRoZSBzYW1lIGFzIGNhbGxpbmcgbG9hZCgpIG9uIHRoYXQgVVJMLlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGdldCh1cmwpIHtcclxuXHRcdHJldHVybiByZXNvdXJjZUNhY2hlW3VybF07XHJcblx0fVxyXG5cclxuXHQvKiBUaGlzIGZ1bmN0aW9uIGRldGVybWluZXMgaWYgYWxsIG9mIHRoZSBpbWFnZXMgdGhhdCBoYXZlIGJlZW4gcmVxdWVzdGVkXHJcblx0ICogZm9yIGxvYWRpbmcgaGF2ZSBpbiBmYWN0IGJlZW4gcHJvcGVybHkgbG9hZGVkLlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGlzUmVhZHkoKSB7XHJcblx0XHR2YXIgcmVhZHkgPSB0cnVlO1xyXG5cdFx0Zm9yKHZhciBrIGluIHJlc291cmNlQ2FjaGUpIHtcclxuXHRcdFx0aWYocmVzb3VyY2VDYWNoZS5oYXNPd25Qcm9wZXJ0eShrKSAmJlxyXG5cdFx0XHRcdCFyZXNvdXJjZUNhY2hlW2tdKSB7XHJcblx0XHRcdFx0cmVhZHkgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlYWR5O1xyXG5cdH1cclxuXHJcblx0LyogVGhpcyBmdW5jdGlvbiB3aWxsIGFkZCBhIGZ1bmN0aW9uIHRvIHRoZSBjYWxsYmFjayBzdGFjayB0aGF0IGlzIGNhbGxlZFxyXG5cdCAqIHdoZW4gYWxsIHJlcXVlc3RlZCBpbWFnZXMgYXJlIHByb3Blcmx5IGxvYWRlZC5cclxuXHQgKi9cclxuXHRmdW5jdGlvbiBvblJlYWR5KGZ1bmMpIHtcclxuXHRcdHJlYWR5Q2FsbGJhY2tzLnB1c2goZnVuYyk7XHJcblx0fVxyXG5cclxuXHQvKiBUaGlzIG9iamVjdCBkZWZpbmVzIHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIGZ1bmN0aW9ucyBhdmFpbGFibGUgdG9cclxuXHQgKiBkZXZlbG9wZXJzIGJ5IGNyZWF0aW5nIGEgZ2xvYmFsIFJlc291cmNlcyBvYmplY3QuXHJcblx0ICovXHJcblx0d2luZG93LlJlc291cmNlcyA9IHtcclxuXHRcdGxvYWQ6IGxvYWQsXHJcblx0XHRnZXQ6IGdldCxcclxuXHRcdG9uUmVhZHk6IG9uUmVhZHksXHJcblx0XHRpc1JlYWR5OiBpc1JlYWR5XHJcblx0fTtcclxufSkoKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vKiBFbmdpbmUuanNcclxuICogVGhpcyBmaWxlIHByb3ZpZGVzIHRoZSBnYW1lIGxvb3AgZnVuY3Rpb25hbGl0eSAodXBkYXRlIGVudGl0aWVzIGFuZCByZW5kZXIpLFxyXG4gKiBkcmF3cyB0aGUgaW5pdGlhbCBnYW1lIGJvYXJkIG9uIHRoZSBzY3JlZW4sIGFuZCB0aGVuIGNhbGxzIHRoZSB1cGRhdGUgYW5kXHJcbiAqIHJlbmRlciBtZXRob2RzIG9uIHlvdXIgcGxheWVyIGFuZCBlbmVteSBvYmplY3RzIChkZWZpbmVkIGluIHlvdXIgYXBwLmpzKS5cclxuICpcclxuICogQSBnYW1lIGVuZ2luZSB3b3JrcyBieSBkcmF3aW5nIHRoZSBlbnRpcmUgZ2FtZSBzY3JlZW4gb3ZlciBhbmQgb3Zlciwga2luZCBvZlxyXG4gKiBsaWtlIGEgZmxpcGJvb2sgeW91IG1heSBoYXZlIGNyZWF0ZWQgYXMgYSBraWQuIFdoZW4geW91ciBwbGF5ZXIgbW92ZXMgYWNyb3NzXHJcbiAqIHRoZSBzY3JlZW4sIGl0IG1heSBsb29rIGxpa2UganVzdCB0aGF0IGltYWdlL2NoYXJhY3RlciBpcyBtb3Zpbmcgb3IgYmVpbmdcclxuICogZHJhd24gYnV0IHRoYXQgaXMgbm90IHRoZSBjYXNlLiBXaGF0J3MgcmVhbGx5IGhhcHBlbmluZyBpcyB0aGUgZW50aXJlIFwic2NlbmVcIlxyXG4gKiBpcyBiZWluZyBkcmF3biBvdmVyIGFuZCBvdmVyLCBwcmVzZW50aW5nIHRoZSBpbGx1c2lvbiBvZiBhbmltYXRpb24uXHJcbiAqXHJcbiAqIFRoaXMgZW5naW5lIG1ha2VzIHRoZSBjYW52YXMnIGNvbnRleHQgKGN0eCkgb2JqZWN0IGdsb2JhbGx5IGF2YWlsYWJsZSB0byBtYWtlIFxyXG4gKiB3cml0aW5nIGFwcC5qcyBhIGxpdHRsZSBzaW1wbGVyIHRvIHdvcmsgd2l0aC5cclxuICovXHJcblxyXG52YXIgRW5naW5lID0gKGZ1bmN0aW9uKGdsb2JhbCkge1xyXG5cdC8qIFByZWRlZmluZSB0aGUgdmFyaWFibGVzIHdlJ2xsIGJlIHVzaW5nIHdpdGhpbiB0aGlzIHNjb3BlLFxyXG5cdCAqIGNyZWF0ZSB0aGUgY2FudmFzIGVsZW1lbnQsIGdyYWIgdGhlIDJEIGNvbnRleHQgZm9yIHRoYXQgY2FudmFzXHJcblx0ICogc2V0IHRoZSBjYW52YXMgZWxlbWVudHMgaGVpZ2h0L3dpZHRoIGFuZCBhZGQgaXQgdG8gdGhlIERPTS5cclxuXHQgKi9cclxuXHR2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50LFxyXG5cdFx0d2luID0gZ2xvYmFsLndpbmRvdyxcclxuXHRcdGNhbnZhcyA9IGRvYy5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSxcclxuXHRcdGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLFxyXG5cdFx0bGFzdFRpbWUsXHJcblx0XHRpZDtcclxuXHJcblx0Y2FudmFzLndpZHRoID0gNTA1O1xyXG5cdGNhbnZhcy5oZWlnaHQgPSA2MDA7XHJcblx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKS5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG5cclxuXHQvKiBUaGlzIGZ1bmN0aW9uIHNlcnZlcyBhcyB0aGUga2lja29mZiBwb2ludCBmb3IgdGhlIGdhbWUgbG9vcCBpdHNlbGZcclxuXHQgKiBhbmQgaGFuZGxlcyBwcm9wZXJseSBjYWxsaW5nIHRoZSB1cGRhdGUgYW5kIHJlbmRlciBtZXRob2RzLlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIG1haW4oKSB7XHJcblx0XHQvKiBHZXQgb3VyIHRpbWUgZGVsdGEgaW5mb3JtYXRpb24gd2hpY2ggaXMgcmVxdWlyZWQgaWYgeW91ciBnYW1lXHJcblx0XHQgKiByZXF1aXJlcyBzbW9vdGggYW5pbWF0aW9uLiBCZWNhdXNlIGV2ZXJ5b25lJ3MgY29tcHV0ZXIgcHJvY2Vzc2VzXHJcblx0XHQgKiBpbnN0cnVjdGlvbnMgYXQgZGlmZmVyZW50IHNwZWVkcyB3ZSBuZWVkIGEgY29uc3RhbnQgdmFsdWUgdGhhdFxyXG5cdFx0ICogd291bGQgYmUgdGhlIHNhbWUgZm9yIGV2ZXJ5b25lIChyZWdhcmRsZXNzIG9mIGhvdyBmYXN0IHRoZWlyXHJcblx0XHQgKiBjb21wdXRlciBpcykgLSBodXJyYXkgdGltZSFcclxuXHRcdCAqL1xyXG5cdFx0dmFyIG5vdyA9IERhdGUubm93KCksXHJcblx0XHRcdGR0ID0gKG5vdyAtIGxhc3RUaW1lKSAvIDEwMDAuMDtcclxuXHJcblx0XHQvKiBDYWxsIG91ciB1cGRhdGUvcmVuZGVyIGZ1bmN0aW9ucywgcGFzcyBhbG9uZyB0aGUgdGltZSBkZWx0YSB0b1xyXG5cdFx0ICogb3VyIHVwZGF0ZSBmdW5jdGlvbiBzaW5jZSBpdCBtYXkgYmUgdXNlZCBmb3Igc21vb3RoIGFuaW1hdGlvbi5cclxuXHRcdCAqL1xyXG5cdFx0dXBkYXRlKGR0KTtcclxuXHRcdHJlbmRlcigpO1xyXG5cclxuXHRcdC8qIFNldCBvdXIgbGFzdFRpbWUgdmFyaWFibGUgd2hpY2ggaXMgdXNlZCB0byBkZXRlcm1pbmUgdGhlIHRpbWUgZGVsdGFcclxuXHRcdCAqIGZvciB0aGUgbmV4dCB0aW1lIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLlxyXG5cdFx0ICovXHJcblx0XHRsYXN0VGltZSA9IG5vdztcclxuXHJcblx0XHQvKiBVc2UgdGhlIGJyb3dzZXIncyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnVuY3Rpb24gdG8gY2FsbCB0aGlzXHJcblx0XHQgKiBmdW5jdGlvbiBhZ2FpbiBhcyBzb29uIGFzIHRoZSBicm93c2VyIGlzIGFibGUgdG8gZHJhdyBhbm90aGVyIGZyYW1lXHJcblx0XHQgKiBvbmx5IHVudGlsbCBwbGF5ZXIgd2lucy5cclxuXHRcdCAqL1xyXG5cdFx0aWYgKHBsYXllci53aW4gfHwgcGxheWVyLmxvc2UpIHtcclxuXHRcdFx0d2luLmNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRpZCA9IHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUobWFpbik7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKiBUaGlzIGZ1bmN0aW9uIGRvZXMgc29tZSBpbml0aWFsIHNldHVwIHRoYXQgc2hvdWxkIG9ubHkgb2NjdXIgb25jZSxcclxuXHQgKiBwYXJ0aWN1bGFybHkgc2V0dGluZyB0aGUgbGFzdFRpbWUgdmFyaWFibGUgdGhhdCBpcyByZXF1aXJlZCBmb3IgdGhlXHJcblx0ICogZ2FtZSBsb29wLlxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGluaXQoKSB7XHJcblx0XHRyZXNldCgpO1xyXG5cdFx0bGFzdFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cdFx0bWFpbigpO1xyXG5cdH1cclxuXHJcblx0LyogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgbWFpbiAob3VyIGdhbWUgbG9vcCkgYW5kIGl0c2VsZiBjYWxscyBhbGxcclxuXHQgKiBvZiB0aGUgZnVuY3Rpb25zIHdoaWNoIG1heSBuZWVkIHRvIHVwZGF0ZSBlbnRpdHkncyBkYXRhLiBCYXNlZCBvbiBob3dcclxuXHQgKiB5b3UgaW1wbGVtZW50IHlvdXIgY29sbGlzaW9uIGRldGVjdGlvbiAod2hlbiB0d28gZW50aXRpZXMgb2NjdXB5IHRoZVxyXG5cdCAqIHNhbWUgc3BhY2UsIGZvciBpbnN0YW5jZSB3aGVuIHlvdXIgY2hhcmFjdGVyIHNob3VsZCBkaWUpLCB5b3UgbWF5IGZpbmRcclxuXHQgKiB0aGUgbmVlZCB0byBhZGQgYW4gYWRkaXRpb25hbCBmdW5jdGlvbiBjYWxsIGhlcmUuIEZvciBub3csIHdlJ3ZlIGxlZnRcclxuXHQgKiBpdCBjb21tZW50ZWQgb3V0IC0geW91IG1heSBvciBtYXkgbm90IHdhbnQgdG8gaW1wbGVtZW50IHRoaXNcclxuXHQgKiBmdW5jdGlvbmFsaXR5IHRoaXMgd2F5ICh5b3UgY291bGQganVzdCBpbXBsZW1lbnQgY29sbGlzaW9uIGRldGVjdGlvblxyXG5cdCAqIG9uIHRoZSBlbnRpdGllcyB0aGVtc2VsdmVzIHdpdGhpbiB5b3VyIGFwcC5qcyBmaWxlKS5cclxuXHQgKi9cclxuXHRmdW5jdGlvbiB1cGRhdGUoZHQpIHtcclxuXHRcdHVwZGF0ZUVudGl0aWVzKGR0KTtcclxuXHRcdC8vIGNoZWNrQ29sbGlzaW9ucygpO1xyXG5cdH1cclxuXHJcblx0LyogVGhpcyBpcyBjYWxsZWQgYnkgdGhlIHVwZGF0ZSBmdW5jdGlvbiBhbmQgbG9vcHMgdGhyb3VnaCBhbGwgb2YgdGhlXHJcblx0ICogb2JqZWN0cyB3aXRoaW4geW91ciBhbGxFbmVtaWVzIGFycmF5IGFzIGRlZmluZWQgaW4gYXBwLmpzIGFuZCBjYWxsc1xyXG5cdCAqIHRoZWlyIHVwZGF0ZSgpIG1ldGhvZHMuIEl0IHdpbGwgdGhlbiBjYWxsIHRoZSB1cGRhdGUgZnVuY3Rpb24gZm9yIHlvdXJcclxuXHQgKiBwbGF5ZXIgb2JqZWN0LiBUaGVzZSB1cGRhdGUgbWV0aG9kcyBzaG91bGQgZm9jdXMgcHVyZWx5IG9uIHVwZGF0aW5nXHJcblx0ICogdGhlIGRhdGEvcHJvcGVydGllcyByZWxhdGVkIHRvIHRoZSBvYmplY3QuIERvIHlvdXIgZHJhd2luZyBpbiB5b3VyXHJcblx0ICogcmVuZGVyIG1ldGhvZHMuXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gdXBkYXRlRW50aXRpZXMoZHQpIHtcclxuXHRcdGFsbEVuZW1pZXMuZm9yRWFjaChmdW5jdGlvbihlbmVteSkge1xyXG5cdFx0XHRlbmVteS51cGRhdGUoZHQpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxseSBkcmF3cyB0aGUgXCJnYW1lIGxldmVsXCIsIGl0IHdpbGwgdGhlbiBjYWxsXHJcblx0ICogdGhlIHJlbmRlckVudGl0aWVzIGZ1bmN0aW9uLiBSZW1lbWJlciwgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnlcclxuXHQgKiBnYW1lIHRpY2sgKG9yIGxvb3Agb2YgdGhlIGdhbWUgZW5naW5lKSBiZWNhdXNlIHRoYXQncyBob3cgZ2FtZXMgd29yayAtXHJcblx0ICogdGhleSBhcmUgZmxpcGJvb2tzIGNyZWF0aW5nIHRoZSBpbGx1c2lvbiBvZiBhbmltYXRpb24gYnV0IGluIHJlYWxpdHlcclxuXHQgKiB0aGV5IGFyZSBqdXN0IGRyYXdpbmcgdGhlIGVudGlyZSBzY3JlZW4gb3ZlciBhbmQgb3Zlci5cclxuXHQgKi9cclxuXHRmdW5jdGlvbiByZW5kZXIoKSB7XHJcblx0XHQvKiBUaGlzIGFycmF5IGhvbGRzIHRoZSByZWxhdGl2ZSBVUkwgdG8gdGhlIGltYWdlIHVzZWRcclxuXHRcdCAqIGZvciB0aGF0IHBhcnRpY3VsYXIgcm93IG9mIHRoZSBnYW1lIGxldmVsLlxyXG5cdFx0ICovXHJcblx0XHR2YXIgcm93SW1hZ2VzID0gW1xyXG5cdFx0XHRcdCdpbWcvd2F0ZXItYmxvY2sucG5nJywgICAvLyBUb3Agcm93IGlzIHdhdGVyXHJcblx0XHRcdFx0J2ltZy9zdG9uZS1ibG9jay5wbmcnLCAgIC8vIFJvdyAxIG9mIDMgb2Ygc3RvbmVcclxuXHRcdFx0XHQnaW1nL3N0b25lLWJsb2NrLnBuZycsICAgLy8gUm93IDIgb2YgMyBvZiBzdG9uZVxyXG5cdFx0XHRcdCdpbWcvc3RvbmUtYmxvY2sucG5nJywgICAvLyBSb3cgMyBvZiAzIG9mIHN0b25lXHJcblx0XHRcdFx0J2ltZy9ncmFzcy1ibG9jay5wbmcnLCAgIC8vIFJvdyAxIG9mIDIgb2YgZ3Jhc3NcclxuXHRcdFx0XHQnaW1nL2dyYXNzLWJsb2NrLnBuZycgICAgLy8gUm93IDIgb2YgMiBvZiBncmFzc1xyXG5cdFx0XHRdLFxyXG5cdFx0XHRudW1Sb3dzID0gNixcclxuXHRcdFx0bnVtQ29scyA9IDUsXHJcblx0XHRcdHJvdywgY29sO1xyXG5cclxuXHRcdC8vIEJlZm9yZSBkcmF3aW5nLCBjbGVhciBleGlzdGluZyBjYW52YXNcclxuXHRcdGN0eC5jbGVhclJlY3QoMCwwLGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KTtcclxuXHJcblx0XHQvKiBMb29wIHRocm91Z2ggdGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIHdlJ3ZlIGRlZmluZWQgYWJvdmVcclxuXHRcdCAqIGFuZCwgdXNpbmcgdGhlIHJvd0ltYWdlcyBhcnJheSwgZHJhdyB0aGUgY29ycmVjdCBpbWFnZSBmb3IgdGhhdFxyXG5cdFx0ICogcG9ydGlvbiBvZiB0aGUgXCJncmlkXCJcclxuXHRcdCAqL1xyXG5cdFx0Zm9yIChyb3cgPSAwOyByb3cgPCBudW1Sb3dzOyByb3crKykge1xyXG5cdFx0XHRmb3IgKGNvbCA9IDA7IGNvbCA8IG51bUNvbHM7IGNvbCsrKSB7XHJcblx0XHRcdFx0LyogVGhlIGRyYXdJbWFnZSBmdW5jdGlvbiBvZiB0aGUgY2FudmFzJyBjb250ZXh0IGVsZW1lbnRcclxuXHRcdFx0XHQgKiByZXF1aXJlcyAzIHBhcmFtZXRlcnM6IHRoZSBpbWFnZSB0byBkcmF3LCB0aGUgeCBjb29yZGluYXRlXHJcblx0XHRcdFx0ICogdG8gc3RhcnQgZHJhd2luZyBhbmQgdGhlIHkgY29vcmRpbmF0ZSB0byBzdGFydCBkcmF3aW5nLlxyXG5cdFx0XHRcdCAqIFdlJ3JlIHVzaW5nIG91ciBSZXNvdXJjZXMgaGVscGVycyB0byByZWZlciB0byBvdXIgaW1hZ2VzXHJcblx0XHRcdFx0ICogc28gdGhhdCB3ZSBnZXQgdGhlIGJlbmVmaXRzIG9mIGNhY2hpbmcgdGhlc2UgaW1hZ2VzLCBzaW5jZVxyXG5cdFx0XHRcdCAqIHdlJ3JlIHVzaW5nIHRoZW0gb3ZlciBhbmQgb3Zlci5cclxuXHRcdFx0XHQgKi9cclxuXHRcdFx0XHRjdHguZHJhd0ltYWdlKFJlc291cmNlcy5nZXQocm93SW1hZ2VzW3Jvd10pLCBjb2wgKiAxMDEsIHJvdyAqIDgzKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJlbmRlckVudGl0aWVzKCk7XHJcblx0fVxyXG5cclxuXHQvKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGFuZCBpcyBjYWxsZWQgb24gZWFjaCBnYW1lXHJcblx0ICogdGljay4gSXRzIHB1cnBvc2UgaXMgdG8gdGhlbiBjYWxsIHRoZSByZW5kZXIgZnVuY3Rpb25zIHlvdSBoYXZlIGRlZmluZWRcclxuXHQgKiBvbiB5b3VyIGVuZW15IGFuZCBwbGF5ZXIgZW50aXRpZXMgd2l0aGluIGFwcC5qc1xyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIHJlbmRlckVudGl0aWVzKCkge1xyXG5cdFx0LyogTG9vcCB0aHJvdWdoIGFsbCBvZiB0aGUgb2JqZWN0cyB3aXRoaW4gdGhlIGFsbEVuZW1pZXMgYXJyYXkgYW5kIGNhbGxcclxuXHRcdCAqIHRoZSByZW5kZXIgZnVuY3Rpb24geW91IGhhdmUgZGVmaW5lZC5cclxuXHRcdCAqL1xyXG5cdFx0YWxsRW5lbWllcy5mb3JFYWNoKGZ1bmN0aW9uKGVuZW15KSB7XHJcblx0XHRcdGVuZW15LnJlbmRlcigpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cGxheWVyLnJlbmRlcigpO1xyXG5cdH1cclxuXHJcblx0LyogVGhpcyBmdW5jdGlvbiBkb2VzIG5vdGhpbmcgYnV0IGl0IGNvdWxkIGhhdmUgYmVlbiBhIGdvb2QgcGxhY2UgdG9cclxuXHQgKiBoYW5kbGUgZ2FtZSByZXNldCBzdGF0ZXMgLSBtYXliZSBhIG5ldyBnYW1lIG1lbnUgb3IgYSBnYW1lIG92ZXIgc2NyZWVuXHJcblx0ICogdGhvc2Ugc29ydHMgb2YgdGhpbmdzLiBJdCdzIG9ubHkgY2FsbGVkIG9uY2UgYnkgdGhlIGluaXQoKSBtZXRob2QuXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gcmVzZXQoKSB7XHJcblx0XHQvLyBub29wXHJcblx0fVxyXG5cclxuXHQvKiBHbyBhaGVhZCBhbmQgbG9hZCBhbGwgb2YgdGhlIGltYWdlcyB3ZSBrbm93IHdlJ3JlIGdvaW5nIHRvIG5lZWQgdG9cclxuXHQgKiBkcmF3IG91ciBnYW1lIGxldmVsLiBUaGVuIHNldCBpbml0IGFzIHRoZSBjYWxsYmFjayBtZXRob2QsIHNvIHRoYXQgd2hlblxyXG5cdCAqIGFsbCBvZiB0aGVzZSBpbWFnZXMgYXJlIHByb3Blcmx5IGxvYWRlZCBvdXIgZ2FtZSB3aWxsIHN0YXJ0LlxyXG5cdCAqL1xyXG5cdFJlc291cmNlcy5sb2FkKFtcclxuXHRcdCdpbWcvc3RvbmUtYmxvY2sucG5nJyxcclxuXHRcdCdpbWcvd2F0ZXItYmxvY2sucG5nJyxcclxuXHRcdCdpbWcvZ3Jhc3MtYmxvY2sucG5nJyxcclxuXHRcdCdpbWcvZW5lbXktYnVnLnBuZycsXHJcblx0XHQnaW1nL2NoYXItYm95LnBuZydcclxuXHRdKTtcclxuXHRSZXNvdXJjZXMub25SZWFkeShpbml0KTtcclxuXHJcblx0LyogQXNzaWduIHRoZSBjYW52YXMnIGNvbnRleHQgb2JqZWN0IHRvIHRoZSBnbG9iYWwgdmFyaWFibGUgKHRoZSB3aW5kb3dcclxuXHQgKiBvYmplY3Qgd2hlbiBydW4gaW4gYSBicm93c2VyKSBzbyB0aGF0IGRldmVsb3BlcnMgY2FuIHVzZSBpdCBtb3JlIGVhc2lseVxyXG5cdCAqIGZyb20gd2l0aGluIHRoZWlyIGFwcC5qcyBmaWxlcy5cclxuXHQgKi9cclxuXHRnbG9iYWwuY3R4ID0gY3R4O1xyXG5cclxuXHRyZXR1cm4ge1xyXG5cdFx0c3RhcnQ6bWFpblxyXG5cdH07XHJcbn0pKHdpbmRvdyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gRW5lbWllcyBvdXIgcGxheWVyIG11c3QgYXZvaWRcclxuY2xhc3MgRW5lbXkge1xyXG5cdGNvbnN0cnVjdG9yKHNwZWVkLCB5LCB4ID0gLTEyMCkge1xyXG5cdFx0dGhpcy5zcHJpdGUgPSAnaW1nL2VuZW15LWJ1Zy5wbmcnO1xyXG5cdFx0dGhpcy5zdGFydFggPSB4O1xyXG5cdFx0dGhpcy54ID0gdGhpcy5zdGFydFg7XHJcblx0XHR0aGlzLnkgPSB5O1xyXG5cclxuXHRcdHRoaXMuc3AgPSBzcGVlZDtcclxuXHRcdHRoaXMucmFuZG9tID0gMTAwO1xyXG5cdH1cclxuXHJcblx0Ly8gVXNlZCB0byBjaGVjayBjb2xsaXNpb25cclxuXHRnZXQgZW5kWCgpIHtcclxuXHRcdHJldHVybiB0aGlzLnggKyB0aWxlV2lkdGg7XHJcblx0fVxyXG5cclxuXHRnZXQgZW5kWSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnkgKyB0aWxlSGVpZ2h0O1xyXG5cdH1cclxuXHJcblx0Ly8gVG8gbW92ZSB0aGUgZW5lbXlcclxuXHR1cGRhdGUoZHQpIHtcclxuXHRcdC8vIEluY3JlbWVudCBpbiBwb3NpdGlvbiBieSBzcGVjaWZpYyBzcGVlZFxyXG5cdFx0dGhpcy54ICs9IHRoaXMuc3AgKiB0aGlzLnJhbmRvbSAqIGR0O1xyXG5cclxuXHRcdC8vIEZvciByZXN0aW5nIHBvc2l0aW9uICYgcmFuZG9taXppbmcgc3BlZWQgZXZlcnkgdGltZSBlbmVteSBjcm9zc2VzIHRoZSByb2FkXHJcblx0XHRpZih0aGlzLnggPj0gNTIwKSB7XHJcblx0XHRcdHRoaXMueCA9IHRoaXMuc3RhcnRYOyAvLyByZXNldCBlbmVteSBwb3NpdGlvblxyXG5cdFx0XHQvL2dldHRpbmcgYSByYW5kb20gbnVtYmVyIGIvdyAxMDAtMjAwXHJcblx0XHRcdHRoaXMucmFuZG9tID0gTWF0aC5yYW5kb20oKSAqICgyMDAtMTAwKSArIDEwMDtcclxuXHRcdH1cclxuXHJcblx0XHRjaGVja0NvbGxpc2lvbih0aGlzKTtcclxuXHRcdGNoZWNrV2luKCk7XHJcblx0fVxyXG5cclxuXHQvLyBEcmF3cyB0aGUgZW5lbXkgb24gdGhlIHNjcmVlblxyXG5cdHJlbmRlcigpIHtcclxuXHRcdGN0eC5kcmF3SW1hZ2UoUmVzb3VyY2VzLmdldCh0aGlzLnNwcml0ZSksIHRoaXMueCwgdGhpcy55KTtcclxuXHR9XHJcbn1cclxuXHJcbi8vIE91ciBQbGF5ZXJcclxuY2xhc3MgUGxheWVyIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMuc3ByaXRlID0gJ2ltZy9jaGFyLWJveS5wbmcnO1xyXG5cclxuXHRcdC8vIFBsYWNlZCB0aGUgcGxheWVyJ3MgZmVldCBpbiBjZW50ZXIgb2YgdGhlIGJsb2NrXHJcblx0XHR0aGlzLnN0YXJ0WCA9IDIwMDtcclxuXHRcdHRoaXMuc3RhcnRZID0gMzc1O1xyXG5cdFx0dGhpcy54ID0gdGhpcy5zdGFydFg7XHJcblx0XHR0aGlzLnkgPSB0aGlzLnN0YXJ0WTtcclxuXHJcblx0XHR0aGlzLndpbiA9IGZhbHNlO1xyXG5cdFx0dGhpcy5sb3NlID0gZmFsc2U7XHJcblx0fVxyXG5cclxuXHQvLyBBcHByb3hpbWF0ZSBsb2NhdGlvbiBvZiBwbGF5ZXIncyBmZWV0IHVzaW5nIGJsb2NrJ3MgZGltZW5zaW9uc1xyXG5cdGdldCBmZWV0WSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnkgKyB0aWxlSGVpZ2h0O1xyXG5cdH1cclxuXHJcblx0Z2V0IGZlZXRYKCkge1xyXG5cdFx0Ly8gSGFsZiBvZiBibG9jaydzIGhvcml6b250YWwgZGltZW5zaW9uIHVzZWRcclxuXHRcdHJldHVybiB0aGlzLnggKyAodGlsZVdpZHRoLzIpO1xyXG5cdH1cclxuXHJcblx0Ly8gRHJhd3MgdGhlIHBsYXllciBvbiB0aGUgc2NyZWVuXHJcblx0cmVuZGVyKCkge1xyXG5cdFx0Y3R4LmRyYXdJbWFnZShSZXNvdXJjZXMuZ2V0KHRoaXMuc3ByaXRlKSwgdGhpcy54LCB0aGlzLnkpO1xyXG5cdH1cclxuXHJcblx0Ly8gVG8gbW92ZSB0aGUgcGxheWVyXHJcblx0aGFuZGxlSW5wdXQoa2V5KSB7XHJcblx0XHQvLyBFYWNoIGJsb2NrIG9uIHRoZSBjYW52YXMgaXMgbGF5ZWQgYXMgMTAxcHgqODNweFxyXG5cdFx0Ly8gc28gY2hhcmFjdGVyIG11c3QgbW92ZSB0aGUgc2FtZSBwaXhlbHNcclxuXHRcdC8vIHRvIGtlZXAgaGltL2hlciBjZW50ZXJlZCBvbiB0aGUgYmxvY2tcclxuXHRcdHN3aXRjaCAoa2V5KSB7XHJcblx0XHRjYXNlICdsZWZ0JzpcclxuXHRcdFx0KHRoaXMueCAhPT0gLTIpID8gdGhpcy54IC09IHRpbGVXaWR0aCA6IDE7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ3VwJzpcclxuXHRcdFx0KHRoaXMueSAhPT0gLTQwKSA/IHRoaXMueSAtPSB0aWxlSGVpZ2h0IDogMTtcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0Y2FzZSAnZG93bic6XHJcblx0XHRcdCh0aGlzLnkgIT09IDM3NSkgPyB0aGlzLnkgKz0gdGlsZUhlaWdodCA6IDE7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdGNhc2UgJ3JpZ2h0JzpcclxuXHRcdFx0KHRoaXMueCAhPT0gNDAyKSA/IHRoaXMueCArPSB0aWxlV2lkdGggOiAxO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcblxyXG4vLyBFbmVteSBhbmQgUExheWVyIGluc3RhbmNlc1xyXG5sZXQgYWxsRW5lbWllcyA9IFtuZXcgRW5lbXkoMS41LCA2NCksIG5ldyBFbmVteSgzLCA2NCwgLTU1MCksIG5ldyBFbmVteSg2LCA2NCwgLTEwMDApLFxyXG5cdG5ldyBFbmVteSgyLCAxNDcpLCBuZXcgRW5lbXkoMS4yLCAxNDcsIC0yMDApLCBuZXcgRW5lbXkoMywgMTQ3LCAtODAwKSxcclxuXHRuZXcgRW5lbXkoMSwgMjMwKSwgbmV3IEVuZW15KDIuMiwgMjMwLCAtNDUwKV07XHJcbmxldCBwbGF5ZXIgPSBuZXcgUGxheWVyKCk7XHJcblxyXG4vLyBEaW1lbnNpb25zIGZvciBldmVyeSBibG9jayBvbiB0aGUgY2FudmFzXHJcbmNvbnN0IHRpbGVXaWR0aCA9IDEwMSxcclxuXHR0aWxlSGVpZ2h0ID0gODM7XHJcblxyXG4vLyBLZXlwcmVzcyBIYW5kbGVyXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZnVuY3Rpb24oZSkge1xyXG5cclxuXHR2YXIgYWxsb3dlZEtleXMgPSB7XHJcblx0XHQzNzogJ2xlZnQnLFxyXG5cdFx0Mzg6ICd1cCcsXHJcblx0XHQzOTogJ3JpZ2h0JyxcclxuXHRcdDQwOiAnZG93bidcclxuXHR9O1xyXG5cclxuXHRwbGF5ZXIuaGFuZGxlSW5wdXQoYWxsb3dlZEtleXNbZS5rZXlDb2RlXSk7XHJcbn0pO1xyXG5cclxuLy8gT24gc2NyZWVuIGtleSBwcmVzcyBoYW5kbGVyXHJcbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcnJvdy1rZXlzJylcclxuXHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcblx0XHRjb25zdCBrZXkgPSBlLnRhcmdldC5jbGFzc0xpc3QudmFsdWU7XHJcblx0XHRzd2l0Y2ggKGtleSkge1xyXG5cdFx0Y2FzZSAnZmFzIGZhLWFycm93LXVwJzpcclxuXHRcdFx0cGxheWVyLmhhbmRsZUlucHV0KCd1cCcpO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRjYXNlICdmYXMgZmEtYXJyb3ctZG93bic6XHJcblx0XHRcdHBsYXllci5oYW5kbGVJbnB1dCgnZG93bicpO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRjYXNlICdmYXMgZmEtYXJyb3ctbGVmdCc6XHJcblx0XHRcdHBsYXllci5oYW5kbGVJbnB1dCgnbGVmdCcpO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRjYXNlICdmYXMgZmEtYXJyb3ctcmlnaHQnOlxyXG5cdFx0XHRwbGF5ZXIuaGFuZGxlSW5wdXQoJ3JpZ2h0Jyk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG4vLyBGdW5jdGlvbnNcclxuXHJcbmZ1bmN0aW9uIGNoZWNrQ29sbGlzaW9uKGVuZW15KXtcclxuXHQvLyBCeSBtYXBwaW5nIGEgcmVjdGFuZ2xlIGZvciB0aGUgZW5lbXkgZnJvbSBbeCB0byBlbmRYXSBhbmQgW3kgdG8gZW5kWV1cclxuXHQvLyBGb3IgcGxheWVyLCB0aGUgZmVldCdzIHBvc2l0aW9uIGlzIHRha2VuIGludG8gY29uc2lkZXJhdGlvblxyXG5cdGlmKHBsYXllci5mZWV0WCA8PSBlbmVteS5lbmRYICYmIHBsYXllci5mZWV0WCA+PSBlbmVteS54KSB7XHJcblx0XHRpZihwbGF5ZXIuZmVldFkgPD0gZW5lbXkuZW5kWSAmJiBwbGF5ZXIuZmVldFkgPj0gZW5lbXkueSkge1xyXG5cdFx0XHRyZXNldFBsYXllcigpO1xyXG5cdFx0XHRyZWR1Y2VMaXZlcygpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVzZXRQbGF5ZXIoKSB7XHJcblx0cGxheWVyLnggPSBwbGF5ZXIuc3RhcnRYO1xyXG5cdHBsYXllci55ID0gcGxheWVyLnN0YXJ0WTtcclxufVxyXG5cclxubGV0IGxpdmVzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmEtaGVhcnQnKSk7XHJcbmxldCBpID0gbGl2ZXMubGVuZ3RoO1xyXG5mdW5jdGlvbiByZWR1Y2VMaXZlcygpIHtcclxuXHRpLS07XHJcblx0bGl2ZXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZmFzJyk7XHJcblx0bGl2ZXNbaV0uY2xhc3NMaXN0LmFkZCgnZmFyJyk7XHJcblx0Y2hlY2tMb3NlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrV2luKCkge1xyXG5cdGlmKHBsYXllci55ID09IC00MCkge1xyXG5cdFx0Z2FtZVdpbigpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2FtZVdpbigpIHtcclxuXHRwbGF5ZXIud2luID0gdHJ1ZTtcclxuXHRudW0gPSAwOyAvLyB0byBhY3Qgb24gZmlyc3QgbW9kYWwgZnJvbSBhcnJheVxyXG5cdHNob3dNb2RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0xvc2UoKSB7XHJcblx0aWYoaSA9PSAwKSB7XHJcblx0XHRnYW1lTG9zZSgpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2FtZUxvc2UoKSB7XHJcblx0cGxheWVyLmxvc2UgPSB0cnVlO1xyXG5cdG51bSA9IDE7IC8vIHRvIGFjdCBvbiBzZWNvbmQgbW9kYWwgZnJvbSBhcnJheVxyXG5cdHNob3dNb2RhbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNldExpdmVzKCkge1xyXG5cdGZvcihpID0gMDsgaSA8IGxpdmVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRsaXZlc1tpXS5jbGFzc0xpc3QuYWRkKCdmYXMnKTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0R2FtZSgpIHtcclxuXHRwbGF5ZXIud2luID0gZmFsc2U7XHJcblx0cGxheWVyLmxvc2UgPSBmYWxzZTtcclxuXHRyZXNldFBsYXllcigpO1xyXG5cdHJlc2V0TGl2ZXMoKTtcclxuXHRoaWRlTW9kYWwoKTtcclxuXHRFbmdpbmUuc3RhcnQoKTtcclxufVxyXG5cclxuY29uc3QgbW9kYWxCYWNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWJhY2snKSxcclxuXHRtb2RhbEJvZHkgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tb2RhbC1ib2R5JykpLCAvLyBib3RoIG1vZGFscyBhZGRlZCB0byBhcnJheVxyXG5cdGNsb3NlQnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNsb3NlJykpLFxyXG5cdHJlc2V0QnV0dG9ucyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlc2V0JykpO1xyXG5sZXQgbnVtO1xyXG4vLyAnbnVtJyB3aWxsIHN0YXRlIHdoaWNoIG1vZGFsIGlzIGluIHBlcnNwZWN0aXZlIGZvciBhbmltYXRpbmcsIHNob3dNb2RhbCwgaGlkZU1vZGFsLCBhbmQgdG9nZ2xlTGlzdGVuZXJzXHJcbi8vIGl0IHdpbGwgY29udHJpYnV0ZSB0byBnb29kIHBlcmZvcm1hbmNlIGJlY2F1c2Ugb25seSB0aGUgbW9kYWwgd2Ugd2FudCB3aWxsIGhhdmUgY2xhc3NlcyBhbmQgbGlzdGVuZXJzIGFkZGVkLlxyXG5cclxuZnVuY3Rpb24gc2hvd01vZGFsKCkge1xyXG5cdG1vZGFsQmFjay5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XHJcblxyXG5cdC8vIGRpc3BsYXkgd2luIG1vZGFsIG9yIGxvc2UgbW9kYWxcclxuXHRtb2RhbEJvZHlbbnVtXS5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XHJcblxyXG5cdC8vIGVudHJ5IGFuaW1hdGlvbiBmb3IgbW9kYWwgaW4gcGVyc3BlY3RpdmVcclxuXHQobnVtID09IDApID8gbW9kYWxCb2R5W251bV0uY2xhc3NMaXN0LmFkZCgndGFkYScpIDogbW9kYWxCb2R5W251bV0uY2xhc3NMaXN0LmFkZCgnd29iYmxlJyk7XHJcblxyXG5cdC8vIHRvIGRpc3BsYXkgbGl2ZXMgZGlyZWN0bHkgZmV0Y2ggZnJvbSBzY29yZS1wYW5lbFxyXG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50JykuaW5uZXJIVE1MID1cclxuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2NvcmUtcGFuZWwnKS5pbm5lckhUTUw7XHJcblxyXG5cdC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcclxuXHR0b2dnbGVMaXN0ZW5lcnMoJ29uJyk7XHJcblxyXG5cdC8vIGZvY3VzIG9uIHJlc2V0IGJ1dHRvbiBpbiByZXNwZWN0aXZlIG1vZGFsXHJcblx0cmVzZXRCdXR0b25zW251bV0uZm9jdXMoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGlkZU1vZGFsKCkge1xyXG5cdG1vZGFsQm9keVtudW1dLmNsYXNzTGlzdC5hZGQoJ2JvdW5jZU91dCcpOyAvLyBleGl0IGFuaW1hdGlvblxyXG5cclxuXHQvLyB0byBhbGxvdyB0aW1lIGZvciBhbmltYXRpb25cclxuXHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdG1vZGFsQm9keVtudW1dLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnLCAndGFkYScsICd3b2JibGUnLCAnYm91bmNlT3V0Jyk7XHJcblx0XHRtb2RhbEJhY2suY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG5cdH0sNzgwKTtcclxuXHJcblx0Ly8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVyc1xyXG5cdHRvZ2dsZUxpc3RlbmVycygnb2ZmJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUxpc3RlbmVycyhzdykge1xyXG5cdHN3aXRjaCAoc3cpIHtcclxuXHRjYXNlICdvbic6XHJcblx0XHRjbG9zZUJ1dHRvbnNbbnVtXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVNb2RhbCk7XHJcblx0XHRyZXNldEJ1dHRvbnNbbnVtXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlc2V0R2FtZSk7XHJcblx0XHRicmVhaztcclxuXHJcblx0Y2FzZSAnb2ZmJzpcclxuXHRcdGNsb3NlQnV0dG9uc1tudW1dLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZU1vZGFsKTtcclxuXHRcdHJlc2V0QnV0dG9uc1tudW1dLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVzZXRHYW1lKTtcclxuXHR9XHJcbn0iXX0=
